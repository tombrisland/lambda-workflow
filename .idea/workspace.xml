<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="ALL" />
  </component>
  <component name="CargoProjects">
    <cargoProject FILE="$PROJECT_DIR$/Cargo.toml">
      <package file="$PROJECT_DIR$/crates/model">
        <enabledFeature name="default" />
      </package>
      <package file="$PROJECT_DIR$/crates/service">
        <enabledFeature name="default" />
      </package>
      <package file="$PROJECT_DIR$/crates/service_sqs">
        <enabledFeature name="default" />
      </package>
      <package file="$PROJECT_DIR$/crates/state">
        <enabledFeature name="default" />
      </package>
      <package file="$PROJECT_DIR$/crates/state_dynamodb">
        <enabledFeature name="default" />
      </package>
      <package file="$PROJECT_DIR$/crates/state_in_memory">
        <enabledFeature name="default" />
      </package>
      <package file="$PROJECT_DIR$/crates/test_utils">
        <enabledFeature name="default" />
      </package>
      <package file="$PROJECT_DIR$/crates/workflow">
        <enabledFeature name="default" />
      </package>
      <package file="$PROJECT_DIR$/examples/workflow_greeter">
        <enabledFeature name="default" />
      </package>
      <package file="$PROJECT_DIR$/examples/workflow_simple">
        <enabledFeature name="default" />
      </package>
    </cargoProject>
  </component>
  <component name="ChangeListManager">
    <list default="true" id="c43fb571-a2e5-44dc-9fde-bf0022301c76" name="Changes" comment="">
      <change afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_25_06_2025_20_28_[Changes]/shelved.patch" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_25_06_2025_20_28_[Changes]1/shelved.patch" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_25_06_2025_20_28__Changes_.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.gitignore" beforeDir="false" afterPath="$PROJECT_DIR$/.gitignore" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/jsLibraryMappings.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/jsLibraryMappings.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/lambda-workflow.iml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/lambda-workflow.iml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/modules.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/modules.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/terraform.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/terraform.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/Cargo.lock" beforeDir="false" afterPath="$PROJECT_DIR$/Cargo.lock" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/Cargo.toml" beforeDir="false" afterPath="$PROJECT_DIR$/Cargo.toml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/README.md" beforeDir="false" afterPath="$PROJECT_DIR$/README.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/TODO.md" beforeDir="false" afterPath="$PROJECT_DIR$/TODO.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/crates/model/Cargo.lock" beforeDir="false" afterPath="$PROJECT_DIR$/crates/model/Cargo.lock" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/crates/model/Cargo.toml" beforeDir="false" afterPath="$PROJECT_DIR$/crates/model/Cargo.toml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/crates/model/src/invocation.rs" beforeDir="false" afterPath="$PROJECT_DIR$/crates/model/src/invocation.rs" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/crates/model/src/lib.rs" beforeDir="false" afterPath="$PROJECT_DIR$/crates/model/src/lib.rs" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/crates/model/src/task.rs" beforeDir="false" afterPath="$PROJECT_DIR$/crates/model/src/task.rs" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/crates/service/Cargo.lock" beforeDir="false" afterPath="$PROJECT_DIR$/crates/service/Cargo.lock" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/crates/service/Cargo.toml" beforeDir="false" afterPath="$PROJECT_DIR$/crates/service/Cargo.toml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/crates/service/src/lib.rs" beforeDir="false" afterPath="$PROJECT_DIR$/crates/service/src/lib.rs" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/crates/service/src/service_dummy.rs" beforeDir="false" afterPath="$PROJECT_DIR$/crates/service/src/service_dummy.rs" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/crates/service_sqs/Cargo.lock" beforeDir="false" afterPath="$PROJECT_DIR$/crates/service_sqs/Cargo.lock" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/crates/service_sqs/Cargo.toml" beforeDir="false" afterPath="$PROJECT_DIR$/crates/service_sqs/Cargo.toml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/crates/service_sqs/src/lib.rs" beforeDir="false" afterPath="$PROJECT_DIR$/crates/service_sqs/src/lib.rs" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/crates/state/Cargo.lock" beforeDir="false" afterPath="$PROJECT_DIR$/crates/state/Cargo.lock" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/crates/state/Cargo.toml" beforeDir="false" afterPath="$PROJECT_DIR$/crates/state/Cargo.toml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/crates/state/src/lib.rs" beforeDir="false" afterPath="$PROJECT_DIR$/crates/state/src/lib.rs" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/crates/state_dynamodb/Cargo.toml" beforeDir="false" afterPath="$PROJECT_DIR$/crates/state_dynamodb/Cargo.toml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/crates/state_dynamodb/src/lib.rs" beforeDir="false" afterPath="$PROJECT_DIR$/crates/state_dynamodb/src/lib.rs" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/crates/state_in_memory/Cargo.lock" beforeDir="false" afterPath="$PROJECT_DIR$/crates/state_in_memory/Cargo.lock" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/crates/state_in_memory/Cargo.toml" beforeDir="false" afterPath="$PROJECT_DIR$/crates/state_in_memory/Cargo.toml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/crates/state_in_memory/src/lib.rs" beforeDir="false" afterPath="$PROJECT_DIR$/crates/state_in_memory/src/lib.rs" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/crates/test_utils/Cargo.toml" beforeDir="false" afterPath="$PROJECT_DIR$/crates/test_utils/Cargo.toml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/crates/test_utils/src/lib.rs" beforeDir="false" afterPath="$PROJECT_DIR$/crates/test_utils/src/lib.rs" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/crates/workflow/Cargo.lock" beforeDir="false" afterPath="$PROJECT_DIR$/crates/workflow/Cargo.lock" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/crates/workflow/Cargo.toml" beforeDir="false" afterPath="$PROJECT_DIR$/crates/workflow/Cargo.toml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/crates/workflow/src/batch_handler.rs" beforeDir="false" afterPath="$PROJECT_DIR$/crates/workflow/src/batch_handler.rs" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/crates/workflow/src/context.rs" beforeDir="false" afterPath="$PROJECT_DIR$/crates/workflow/src/context.rs" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/crates/workflow/src/lib.rs" beforeDir="false" afterPath="$PROJECT_DIR$/crates/workflow/src/lib.rs" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/crates/workflow/src/runtime.rs" beforeDir="false" afterPath="$PROJECT_DIR$/crates/workflow/src/runtime.rs" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/examples/workflow_greeter/Cargo.lock" beforeDir="false" afterPath="$PROJECT_DIR$/examples/workflow_greeter/Cargo.lock" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/examples/workflow_greeter/Cargo.toml" beforeDir="false" afterPath="$PROJECT_DIR$/examples/workflow_greeter/Cargo.toml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/examples/workflow_greeter/src/main.rs" beforeDir="false" afterPath="$PROJECT_DIR$/examples/workflow_greeter/src/main.rs" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/examples/workflow_greeter/src/service_name.rs" beforeDir="false" afterPath="$PROJECT_DIR$/examples/workflow_greeter/src/service_name.rs" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/examples/workflow_greeter/tests/integration_test.rs" beforeDir="false" afterPath="$PROJECT_DIR$/examples/workflow_greeter/tests/integration_test.rs" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/examples/workflow_greeter/tests/requests/request.json" beforeDir="false" afterPath="$PROJECT_DIR$/examples/workflow_greeter/tests/requests/request.json" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/examples/workflow_greeter/tests/service_name/index.js" beforeDir="false" afterPath="$PROJECT_DIR$/examples/workflow_greeter/tests/service_name/index.js" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/examples/workflow_greeter/tests/terraform/.terraform.lock.hcl" beforeDir="false" afterPath="$PROJECT_DIR$/examples/workflow_greeter/tests/terraform/.terraform.lock.hcl" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/examples/workflow_greeter/tests/terraform/main.tf" beforeDir="false" afterPath="$PROJECT_DIR$/examples/workflow_greeter/tests/terraform/main.tf" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/examples/workflow_greeter/tests/terraform/variables.tf" beforeDir="false" afterPath="$PROJECT_DIR$/examples/workflow_greeter/tests/terraform/variables.tf" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/examples/workflow_simple/Cargo.lock" beforeDir="false" afterPath="$PROJECT_DIR$/examples/workflow_simple/Cargo.lock" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/examples/workflow_simple/Cargo.toml" beforeDir="false" afterPath="$PROJECT_DIR$/examples/workflow_simple/Cargo.toml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/examples/workflow_simple/src/main.rs" beforeDir="false" afterPath="$PROJECT_DIR$/examples/workflow_simple/src/main.rs" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/examples/workflow_simple/src/service_example.rs" beforeDir="false" afterPath="$PROJECT_DIR$/examples/workflow_simple/src/service_example.rs" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/terraform/modules/lambda_async/iam.tf" beforeDir="false" afterPath="$PROJECT_DIR$/terraform/modules/lambda_async/iam.tf" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/terraform/modules/lambda_async/main.tf" beforeDir="false" afterPath="$PROJECT_DIR$/terraform/modules/lambda_async/main.tf" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/terraform/modules/lambda_async/outputs.tf" beforeDir="false" afterPath="$PROJECT_DIR$/terraform/modules/lambda_async/outputs.tf" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/terraform/modules/lambda_async/variables.tf" beforeDir="false" afterPath="$PROJECT_DIR$/terraform/modules/lambda_async/variables.tf" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="ExecutionTargetManager" SELECTED_TARGET="RsBuildProfile:test" />
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="package.json" />
        <option value="Rust File" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="GitHubPullRequestSearchHistory">{
  &quot;lastFilter&quot;: {
    &quot;state&quot;: &quot;OPEN&quot;,
    &quot;assignee&quot;: &quot;tombrisland&quot;
  }
}</component>
  <component name="GithubPullRequestsUISettings">{
  &quot;selectedUrlAndAccountId&quot;: {
    &quot;url&quot;: &quot;https://github.com/tombrisland/lambda-workflow.git&quot;,
    &quot;accountId&quot;: &quot;68ae8b88-8413-4827-a724-dabe919c524a&quot;
  }
}</component>
  <component name="HighlightingSettingsPerFile">
    <setting file="file://$USER_HOME$/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/aws_lambda_events-0.16.0/src/event/sqs/mod.rs" root0="SKIP_INSPECTION" />
    <setting file="file://$USER_HOME$/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/lambda_runtime-0.14.1/src/lib.rs" root0="SKIP_INSPECTION" />
    <setting file="file://$USER_HOME$/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/lambda_runtime_api_client-0.12.1/src/tracing.rs" root0="SKIP_INSPECTION" />
    <setting file="file://$USER_HOME$/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_dynamo-4.2.14/src/de/mod.rs" root0="FORCE_HIGHLIGHTING" />
    <setting file="file://$USER_HOME$/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-0.5.2/src/util/service_fn.rs" root0="SKIP_INSPECTION" />
    <setting file="file://$USER_HOME$/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-service-0.3.3/src/lib.rs" root0="SKIP_INSPECTION" />
    <setting file="file://$USER_HOME$/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tracing-0.1.41/src/macros.rs" root0="SKIP_INSPECTION" />
  </component>
  <component name="MacroExpansionManager">
    <option name="directoryName" value="7C1fsrp6" />
  </component>
  <component name="ProjectColorInfo">{
  &quot;associatedIndex&quot;: 8
}</component>
  <component name="ProjectId" id="2yCN967Omh24D3hXkQFXp7aWNV4" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">{
  &quot;keyToString&quot;: {
    &quot;ASKED_SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
    &quot;Cargo.Build state_dynamodb.executor&quot;: &quot;Run&quot;,
    &quot;Cargo.Doctest of workflow_handler (line 19).executor&quot;: &quot;Run&quot;,
    &quot;Cargo.Run workflow_simple.executor&quot;: &quot;Run&quot;,
    &quot;Cargo.Run workflow_sqs.executor&quot;: &quot;Run&quot;,
    &quot;Cargo.Test batch_handler::tests.executor&quot;: &quot;Run&quot;,
    &quot;Cargo.Test batch_handler::tests::test_single_item_fail.executor&quot;: &quot;Run&quot;,
    &quot;Cargo.Test batch_handler::tests::test_single_item_panic (1).executor&quot;: &quot;Run&quot;,
    &quot;Cargo.Test batch_handler::tests::test_single_item_panic.executor&quot;: &quot;Run&quot;,
    &quot;Cargo.Test batch_handler::tests::test_successful_batch.executor&quot;: &quot;Run&quot;,
    &quot;Cargo.Test batch_handler::tests::test_suspension_treated_as_success.executor&quot;: &quot;Run&quot;,
    &quot;Cargo.Test engine::tests.executor&quot;: &quot;Run&quot;,
    &quot;Cargo.Test engine::tests::test_engine_initialises_request.executor&quot;: &quot;Run&quot;,
    &quot;Cargo.Test engine::tests::test_event_handler.executor&quot;: &quot;Run&quot;,
    &quot;Cargo.Test main::tests.executor&quot;: &quot;Run&quot;,
    &quot;Cargo.Test tests::test_engine_initialises_request.executor&quot;: &quot;Run&quot;,
    &quot;Cargo.Test tests::test_event_handler (1).executor&quot;: &quot;Run&quot;,
    &quot;Cargo.Test tests::test_event_handler (2).executor&quot;: &quot;Run&quot;,
    &quot;Cargo.Test tests::test_event_handler.executor&quot;: &quot;Run&quot;,
    &quot;ModuleVcsDetector.initialDetectionPerformed&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.TerminalTabsStorage.copyFrom.TerminalArrangementManager&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.git.unshallow&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.rust.reset.selective.auto.import&quot;: &quot;true&quot;,
    &quot;SHELLCHECK.PATH&quot;: &quot;I do mind&quot;,
    &quot;git-widget-placeholder&quot;: &quot;main&quot;,
    &quot;ignore.virus.scanning.warn.message&quot;: &quot;true&quot;,
    &quot;javascript.nodejs.core.library.configured.version&quot;: &quot;16.15.1&quot;,
    &quot;javascript.nodejs.core.library.typings.version&quot;: &quot;16.18.126&quot;,
    &quot;last_opened_file_path&quot;: &quot;/Users/tomb/code/lambda-workflow/crates&quot;,
    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
    &quot;org.rust.cargo.project.model.PROJECT_DISCOVERY&quot;: &quot;true&quot;,
    &quot;org.rust.cargo.project.model.impl.CargoExternalSystemProjectAware.subscribe.first.balloon&quot;: &quot;&quot;,
    &quot;org.rust.first.attach.projects&quot;: &quot;true&quot;,
    &quot;settings.editor.selected.configurable&quot;: &quot;vcs.Git&quot;,
    &quot;ts.external.directory.path&quot;: &quot;/Users/tomb/Applications/RustRover.app/Contents/plugins/javascript-plugin/jsLanguageServicesImpl/external&quot;,
    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
  },
  &quot;keyToStringList&quot;: {
    &quot;GitStage.ChangesTree.GroupingKeys&quot;: [
      &quot;directory&quot;,
      &quot;module&quot;,
      &quot;repository&quot;
    ]
  }
}</component>
  <component name="RecentsManager">
    <key name="CopyFile.RECENT_KEYS">
      <recent name="$PROJECT_DIR$/crates" />
      <recent name="$PROJECT_DIR$/examples/workflow_sqs/terraform" />
      <recent name="$PROJECT_DIR$/terraform/modules" />
      <recent name="$PROJECT_DIR$/examples" />
      <recent name="$PROJECT_DIR$/crates/service/src" />
    </key>
    <key name="MoveFile.RECENT_KEYS">
      <recent name="$PROJECT_DIR$/examples/workflow_greeter/tests" />
      <recent name="$PROJECT_DIR$/examples/workflow_greeter/tests/requests" />
    </key>
  </component>
  <component name="RunManager" selected="Cargo.Test engine::tests">
    <configuration name="Build state_dynamodb" type="CargoCommandRunConfiguration" factoryName="Cargo Command" temporary="true">
      <option name="buildProfileId" value="dev" />
      <option name="command" value="build --package state_dynamodb --lib" />
      <option name="workingDirectory" value="file://$PROJECT_DIR$" />
      <envs />
      <option name="emulateTerminal" value="true" />
      <option name="channel" value="DEFAULT" />
      <option name="requiredFeatures" value="true" />
      <option name="allFeatures" value="false" />
      <option name="withSudo" value="false" />
      <option name="buildTarget" value="REMOTE" />
      <option name="backtrace" value="SHORT" />
      <option name="isRedirectInput" value="false" />
      <option name="redirectInputPath" value="" />
      <method v="2">
        <option name="CARGO.BUILD_TASK_PROVIDER" enabled="true" />
      </method>
    </configuration>
    <configuration name="Run workflow_sqs" type="CargoCommandRunConfiguration" factoryName="Cargo Command" temporary="true">
      <option name="buildProfileId" value="dev" />
      <option name="command" value="run --package workflow_sqs --bin workflow_sqs" />
      <option name="workingDirectory" value="file://$PROJECT_DIR$" />
      <envs />
      <option name="emulateTerminal" value="true" />
      <option name="channel" value="DEFAULT" />
      <option name="requiredFeatures" value="true" />
      <option name="allFeatures" value="false" />
      <option name="withSudo" value="false" />
      <option name="buildTarget" value="REMOTE" />
      <option name="backtrace" value="SHORT" />
      <option name="isRedirectInput" value="false" />
      <option name="redirectInputPath" value="" />
      <method v="2">
        <option name="CARGO.BUILD_TASK_PROVIDER" enabled="true" />
      </method>
    </configuration>
    <configuration name="Test batch_handler::tests" type="CargoCommandRunConfiguration" factoryName="Cargo Command" temporary="true">
      <option name="command" value="test --package workflow --lib batch_handler::tests" />
      <option name="workingDirectory" value="file://$PROJECT_DIR$" />
      <envs />
      <option name="emulateTerminal" value="true" />
      <option name="channel" value="DEFAULT" />
      <option name="requiredFeatures" value="true" />
      <option name="allFeatures" value="false" />
      <option name="withSudo" value="false" />
      <option name="buildTarget" value="REMOTE" />
      <option name="backtrace" value="SHORT" />
      <option name="isRedirectInput" value="false" />
      <option name="redirectInputPath" value="" />
      <method v="2">
        <option name="CARGO.BUILD_TASK_PROVIDER" enabled="true" />
      </method>
    </configuration>
    <configuration name="Test engine::tests" type="CargoCommandRunConfiguration" factoryName="Cargo Command" temporary="true">
      <option name="buildProfileId" value="test" />
      <option name="command" value="test --package workflow --lib engine::tests" />
      <option name="workingDirectory" value="file://$PROJECT_DIR$" />
      <envs />
      <option name="emulateTerminal" value="true" />
      <option name="channel" value="DEFAULT" />
      <option name="requiredFeatures" value="true" />
      <option name="allFeatures" value="false" />
      <option name="withSudo" value="false" />
      <option name="buildTarget" value="REMOTE" />
      <option name="backtrace" value="SHORT" />
      <option name="isRedirectInput" value="false" />
      <option name="redirectInputPath" value="" />
      <method v="2">
        <option name="CARGO.BUILD_TASK_PROVIDER" enabled="true" />
      </method>
    </configuration>
    <configuration name="Test main::tests" type="CargoCommandRunConfiguration" factoryName="Cargo Command" temporary="true">
      <option name="buildProfileId" value="test" />
      <option name="command" value="test --package workflow_simple --bin workflow_simple tests" />
      <option name="workingDirectory" value="file://$PROJECT_DIR$" />
      <envs />
      <option name="emulateTerminal" value="true" />
      <option name="channel" value="DEFAULT" />
      <option name="requiredFeatures" value="true" />
      <option name="allFeatures" value="false" />
      <option name="withSudo" value="false" />
      <option name="buildTarget" value="REMOTE" />
      <option name="backtrace" value="SHORT" />
      <option name="isRedirectInput" value="false" />
      <option name="redirectInputPath" value="" />
      <method v="2">
        <option name="CARGO.BUILD_TASK_PROVIDER" enabled="true" />
      </method>
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="Cargo.Run workflow_sqs" />
        <item itemvalue="Cargo.Test main::tests" />
        <item itemvalue="Cargo.Build state_dynamodb" />
        <item itemvalue="Cargo.Test engine::tests" />
        <item itemvalue="Cargo.Test batch_handler::tests" />
      </list>
    </recent_temporary>
  </component>
  <component name="RustProjectSettings">
    <option name="toolchainHomeDirectory" value="$USER_HOME$/.cargo/bin" />
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="c43fb571-a2e5-44dc-9fde-bf0022301c76" name="Changes" comment="" />
      <created>1749334440845</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1749334440845</updated>
      <workItem from="1749334441939" duration="6713000" />
      <workItem from="1749373223917" duration="50510000" />
      <workItem from="1749838016632" duration="32651000" />
      <workItem from="1750587773129" duration="12796000" />
    </task>
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
</project>